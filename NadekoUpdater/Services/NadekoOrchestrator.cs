using Kotz.Events;
using NadekoUpdater.Models.Config;
using NadekoUpdater.Models.EventArguments;
using System.Diagnostics;
using System.Text;

namespace NadekoUpdater.Services;

/// <summary>
/// Represents an object that coordinates multiple running processes of NadekoBot.
/// </summary>
public sealed class NadekoOrchestrator
{
    private readonly Dictionary<uint, Process> _runningBots = new();
    private readonly Dictionary<uint, StringBuilder> _stdoutAccumulator = new();
    private readonly Dictionary<uint, StringBuilder> _stderrAccumulator = new();
    private readonly ReadOnlyAppConfig _appConfig;
    private readonly string _fileName = (OperatingSystem.IsWindows()) ? "NadekoBot.exe" : "NadekoBot";

    /// <summary>
    /// Raised when a bot process prints data to stdout.
    /// </summary>
    public event EventHandler<NadekoOrchestrator, ProcessStdWriteEventArgs>? OnStdout;

    /// <summary>
    /// Raised when a bot process prints data to stderr.
    /// </summary>
    public event EventHandler<NadekoOrchestrator, ProcessStdWriteEventArgs>? OnStderr;

    /// <summary>
    /// Raised when a bot process exits.
    /// </summary>
    public event EventHandler<NadekoOrchestrator, BotExitEventArgs>? OnBotExit;

    /// <summary>
    /// Creates an object that coordinates multiple running processes of NadekoBot.
    /// </summary>
    /// <param name="appConfig">The application settings.</param>
    public NadekoOrchestrator(ReadOnlyAppConfig appConfig)
        => _appConfig = appConfig;

    /// <summary>
    /// Determines whether the bot with the specified
    /// position in the lateral bar is currently running.
    /// </summary>
    /// <param name="botPosition">The bot's position in the lateral bar.</param>
    /// <returns><see langword="true"/> if the bot is running, <see langword="false"/> otherwise.</returns>
    public bool IsBotRunning(uint botPosition)
        => _runningBots.ContainsKey(botPosition);

    /// <summary>
    /// Starts the bot with the specified position.
    /// </summary>
    /// <param name="botPosition">The bot's position in the lateral bar.</param>
    /// <returns><see langword="true"/> if the bot successfully started, <see langword="false"/> otherwise.</returns>
    public bool Start(uint botPosition)
    {
        if (_runningBots.ContainsKey(botPosition)
            || !_appConfig.BotEntries.TryGetValue(botPosition, out var botEntry)
            || !File.Exists(Path.Combine(botEntry.InstanceDirectoryUri, _fileName)))
            return false;

        var botProcess = Process.Start(new ProcessStartInfo()
        {
            FileName = Path.Combine(botEntry.InstanceDirectoryUri, _fileName),
            WorkingDirectory = botEntry.InstanceDirectoryUri,
            UseShellExecute = false,
            CreateNoWindow = true,
            RedirectStandardOutput = true,
            RedirectStandardError = true,
        });
                
        if (botProcess is null)
            return false;

        botProcess.EnableRaisingEvents = true;
        botProcess.OutputDataReceived += EmitStdout;
        botProcess.ErrorDataReceived += EmitStderr;
        botProcess.Exited += OnExit;
        botProcess.BeginOutputReadLine();
        botProcess.BeginErrorReadLine();

        _stdoutAccumulator.TryAdd(botPosition, new());
        _stderrAccumulator.TryAdd(botPosition, new());

        return _runningBots.TryAdd(botPosition, botProcess);
    }

    /// <summary>
    /// Stops the bot with the specified position.
    /// </summary>
    /// <param name="botPosition">The bot's position in the lateral bar.</param>
    /// <returns><see langword="true"/> if the bot successfully stopped, <see langword="false"/> otherwise.</returns>
    public bool Stop(uint botPosition)
    {
        if (!_runningBots.TryGetValue(botPosition, out var botProcess))
            return false;

        botProcess.Kill(true);
        return true;
    }

    public string GetLogs(uint botPosition)
    {
        _stdoutAccumulator.TryGetValue(botPosition, out var stdoutSb);
        _stderrAccumulator.TryGetValue(botPosition, out var stderrSb);

        return stdoutSb?.ToString() + stderrSb?.ToString() ?? string.Empty;
    }

    /// <summary>
    /// Deletes the process logs generated by a bot process.
    /// </summary>
    /// <param name="botPosition">The bot's position in the lateral bar.</param>
    /// <returns><see langword="true"/> if the logs were successfully cleared, <see langword="false"/> otherwise.</returns>
    public bool ClearLogs(uint botPosition)
    {
        var wasRemoved = _stdoutAccumulator.Remove(botPosition, out var stdoutSb) | _stderrAccumulator.Remove(botPosition, out var stderrSb);

        stdoutSb?.Clear();
        stderrSb?.Clear();

        return wasRemoved;
    }

    /// <summary>
    /// Finalizes a process when it stops running.
    /// </summary>
    /// <param name="sender">The <see cref="Process"/>.</param>
    /// <param name="eventArgs">The event arguments.</param>
    /// <exception cref="InvalidOperationException">Occurs when <paramref name="sender"/> is not of type <see cref="Process"/>.</exception>
    private void OnExit(object? sender, EventArgs eventArgs)
    {
        var (position, process) = _runningBots.First(x => x.Value.Equals(sender));
        OnBotExit?.Invoke(this, new(position, process.ExitCode));

        _runningBots.Remove(position);
        process.CancelOutputRead();
        process.CancelErrorRead();
        process.Dispose();
    }

    /// <summary>
    /// Raises <see cref="OnStdout"/> with its appropriate event arguments.
    /// </summary>
    /// <param name="sender">The <see cref="Process"/>.</param>
    /// <param name="eventArgs">The event arguments.</param>
    private void EmitStdout(object sender, DataReceivedEventArgs eventArgs)
    {
        var processEntry = _runningBots.First(x => x.Value.Equals(sender));
        var stringBuilder = _stdoutAccumulator[processEntry.Key].AppendLine(eventArgs.Data);
        var newEventArgs = new ProcessStdWriteEventArgs(processEntry.Key, eventArgs.Data ?? string.Empty, stringBuilder);

        OnStdout?.Invoke(this, newEventArgs);
    }

    /// <summary>
    /// Raises <see cref="OnStderr"/> with its appropriate event arguments.
    /// </summary>
    /// <param name="sender">The <see cref="Process"/>.</param>
    /// <param name="eventArgs">The event arguments.</param>
    private void EmitStderr(object sender, DataReceivedEventArgs eventArgs)
    {
        var (position, process) = _runningBots.First(x => x.Value.Equals(sender));
        var dataToAdd = string.IsNullOrWhiteSpace(eventArgs.Data)   // If stderr is null, that means the process has exited with code 0.
            ? Environment.NewLine + "Bot stopped." + Environment.NewLine
            : eventArgs.Data;
        var stringBuilder = _stderrAccumulator[position].AppendLine(dataToAdd);
        var newEventArgs = new ProcessStdWriteEventArgs(position, dataToAdd, stringBuilder);

        OnStderr?.Invoke(this, newEventArgs);
    }
}